from openpyxl import Workbook
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Border, Side, Alignment, Protection, Font
from openpyxl.worksheet.dimensions import SheetDimension
from openpyxl.utils import get_column_letter
from tkinter import *


thick_border = Border(left=Side(style='thick'), 
                     right=Side(style='thick'), 
                     top=Side(style='thick'), 
                     bottom=Side(style='thick'))

thin_border_all = Border(left=Side(style='thin'), 
                     right=Side(style='thin'), 
                     top=Side(style='thin'), 
                     bottom=Side(style='thin'))

thin_border_sides = Border(left=Side(style='thin'), 
                     right=Side(style='thin'), 
                     top=Side(style=None), 
                     bottom=Side(style=None))


thin_border_sides_Bottom = Border(left=Side(style='thin'), 
                     right=Side(style='thin'), 
                     top=Side(style=None), 
                     bottom=Side(style='thin'))

# workbook = Workbook()




def existing_WORKBOOK():
    workbook_Title = input("Whats the name of the book?: ")
    workbook = load_workbook(filename=workbook_Title+".xlsx")
    sheet = workbook.active
    def add_qual():
        nonlocal sheet
    #SET COLUMN WIDTH
        for col in range(1,31):
            column_letter = get_column_letter(col)
            # print(column_letter)
            sheet.column_dimensions[column_letter].width = 42

    #SET TITLE
        sheet.merge_cells(start_row=2, start_column=1, end_row=2, end_column=31)
        sheet.row_dimensions[2].height = 60
        title_Cell = sheet['A2']
        title_Cell.border = thick_border
        title_Cell.value = "SEPTEMBER ELECTRICAL SYSTEMS INSTRUCTOR SCHEDULE"
        title_Cell.font = Font(size=60,name="Times New Roman",bold=True)



        #SET DATES
        for i in range(1,31):
            datecellref=sheet.cell(row=1, column=i)
            datecellref.fill = PatternFill("solid", fgColor="DDDDDD")
            
            if(i<10):
                datecellref.value="01/0"+str(i)+"/2021"
            else:
                datecellref.value="01/"+str(i)+"/2021"

        #SET DIVIDER      

        for i in range(1,31):
            datecellref2=sheet.cell(row=3, column=i)
            datecellref2.fill = PatternFill("solid", fgColor="000000")
            datecellref2.value="blank"  


        qualName = input("Enter Qual Number: ")
        blockName = input("Enter block Number: ")
        startDate = input("Enter Start Date: ")
        endDate = input("Enter End Date: ")

        #Start Date
        col_index = int(startDate)
        row_index=4
        print("First row index: "+str(row_index))

        #THE DASHED CELLS ITERATORS
        # blank_col_index = col_index
        # blank_row_index=row_index+1
        
        #TITLE CELL
        cellref = sheet.cell(row=row_index,column=col_index)
        cellref.border = thick_border

       

        #DASHED CELLS
        blank_cellref = sheet.cell(row=row_index+1,column=col_index)
        blank_cellref2 = sheet.cell(row=row_index+2,column=col_index)
        blank_cellref3 = sheet.cell(row=row_index+3,column=col_index)
        blank_cellref4 = sheet.cell(row=row_index+4,column=col_index)
        # print(cellref.coordinate)

        #End Date
        des_col=int(endDate)+1
        total_index = 0

        #COLUMN ITERATOR LOOP
        while col_index < des_col:
            
            #IF THERES A VALUE IN THE CELL
            while cellref.value:
                row_index+=1
                print("Row index: " + str(row_index))
                cellref = sheet.cell(row=row_index,column=col_index)
                blank_cellref = sheet.cell(row=row_index+1,column=col_index)
                blank_cellref2 = sheet.cell(row=row_index+2,column=col_index)
                blank_cellref3 = sheet.cell(row=row_index+3,column=col_index)
                blank_cellref4 = sheet.cell(row=row_index+4,column=col_index)
                print("Skiped Title = " + cellref.coordinate)
                print("Skipped blank = " + blank_cellref.coordinate)            
            else:
                cellref.value="Q"+str(qualName)+" " +"Block:"+str(blockName)
                # for items in sorted(sheet.merged_cell_ranges):
                #     print(items)
                #     sheet.unmerge_cells(str(items))

                #TITLE COLOR CODING
                #QUAL 1
                cellref.border = thick_border
                if (qualName == "1" and blockName == "1"):
                    cellref.fill = PatternFill("solid", fgColor="00CCFF")
                elif (qualName == "1"and blockName == "2"):
                    cellref.fill = PatternFill("solid", fgColor="33CCCC")
                elif (qualName == "1" and blockName == "3"):
                    cellref.fill = PatternFill("solid", fgColor="92D050")
                elif (qualName == "1"and blockName == "4"):
                    cellref.fill = PatternFill("solid", fgColor="FFFF00")
                elif (qualName == "1" and blockName == "5"):
                    cellref.fill = PatternFill("solid", fgColor="FFC000")
                elif (qualName == "1"and blockName == "6"):
                    cellref.fill = PatternFill("solid", fgColor="FF0000")

                #QUAL2
                elif (qualName == "2" and blockName == "1"):
                    cellref.fill = PatternFill("solid", fgColor="00B0F0")
                elif (qualName == "2"and blockName == "2"):
                    cellref.fill = PatternFill("solid", fgColor="92D050")

                #QUAL3
                elif (qualName == "3" and blockName == "1"):
                    cellref.fill = PatternFill("solid", fgColor="FFFF00")
                elif (qualName == "3"and blockName == "2"):
                    cellref.fill = PatternFill("solid", fgColor="9BBB59")
                elif (qualName == "3"and blockName == "3"):
                    cellref.fill = PatternFill("solid", fgColor="FFC000")


                #SETTING BLANK VALUES BORDERS
                blank_cellref.border = thin_border_sides
                blank_cellref2.border = thin_border_sides
                blank_cellref3.border = thin_border_sides
                blank_cellref4.border = thin_border_sides_Bottom

                #SETTING BLANK VALUES
                blank_cellref.value="------"
                blank_cellref2.value="------"
                blank_cellref3.value="------"
                blank_cellref4.value="------"
                total_index+=1
                # print("Title = " + cellref.coordinate)
                # print("blank = " + blank_cellref.coordinate)
            col_index+=1
            print("column index: "+str(col_index))   

            # blank_col_index+=1
            row_index=4
            print("row index"+str(row_index))   
            cellref = sheet.cell(row=row_index,column=col_index)
            blank_cellref = sheet.cell(row=row_index+1,column=col_index)
            blank_cellref2 = sheet.cell(row=row_index+2,column=col_index)
            blank_cellref3 = sheet.cell(row=row_index+3,column=col_index)
            blank_cellref4 = sheet.cell(row=row_index+4,column=col_index)
            workbook.save(filename=workbook_Title+".xlsx")


            #For some reason this stops all columns from being written

        print("Press 1 to enter another qual: ")
        print("Press 2 to go back")
        exit_menu = input()
        if exit_menu == "1":
            add_qual()
        else:
            menu()

    add_qual()        






#======================================================================================================#
#======================================================================================================#


#======================================================================================================#

#======================================================================================================#

#======================================================================================================#
#======================================================================================================#
#======================================================================================================#
#======================================================================================================#
#======================================================================================================#
#======================================================================================================#
#======================================================================================================#




#MOST PROMISING METHOD SO FAR
#MAIN FUNCTION

def new_WORKBOOK():
    workbook_Title = input("What Would you like to name it?: ")
    workbook = Workbook()
    sheet = workbook.active
    def addQual():
        nonlocal sheet
       
        
        #SET COLUMN WIDTH
        for col in range(1,31):
            column_letter = get_column_letter(col)
            # print(column_letter)
            sheet.column_dimensions[column_letter].width = 42



        #SET DATES
        for i in range(1,31):
            datecellref=sheet.cell(row=1, column=i)
            datecellref.fill = PatternFill("solid", fgColor="DDDDDD")
            if(i<10):
                datecellref.value="01/0"+str(i)+"/2021"
            else:
                datecellref.value="01/"+str(i)+"/2021" 


        qualName = input("Enter Qual Number: ")
        blockName = input("Enter block Number: ")
        startDate = input("Enter Start Date: ")
        endDate = input("Enter End Date: ")

        #Start Date
        col_index = int(startDate)
        row_index=3

        #THE DASHED CELLS ITERATORS
        blank_col_index = col_index
        blank_row_index=row_index+1
        
        #TITLE CELL
        cellref = sheet.cell(row=row_index,column=col_index)
        cellref.border = thick_border





       

        #DASHED CELLS
        blank_cellref = sheet.cell(row=row_index+1,column=col_index)
        blank_cellref2 = sheet.cell(row=row_index+2,column=col_index)
        blank_cellref3 = sheet.cell(row=row_index+3,column=col_index)
        blank_cellref4 = sheet.cell(row=row_index+4,column=col_index)
        # print(cellref.coordinate)

        #End Date
        des_col=int(endDate)+1
        total_index = 0
        while col_index < des_col:
            
            while cellref.value:
                row_index+=1
                cellref = sheet.cell(row=row_index,column=col_index)
                blank_cellref = sheet.cell(row=row_index+1,column=col_index)
                blank_cellref2 = sheet.cell(row=row_index+2,column=col_index)
                blank_cellref3 = sheet.cell(row=row_index+3,column=col_index)
                blank_cellref4 = sheet.cell(row=row_index+4,column=col_index)
                # print("Title = " + cellref.coordinate)
                # print("blank = " + blank_cellref.coordinate)            
            else:
                cellref.value="Q"+str(qualName)+" " +"Block:"+str(blockName)

                #TITLE COLOR CODING
                #QUAL 1
                cellref.border = thick_border
                if (qualName == "1" and blockName == "1"):
                    cellref.fill = PatternFill("solid", fgColor="00CCFF")
                elif (qualName == "1"and blockName == "2"):
                    cellref.fill = PatternFill("solid", fgColor="33CCCC")
                elif (qualName == "1" and blockName == "3"):
                    cellref.fill = PatternFill("solid", fgColor="92D050")
                elif (qualName == "1"and blockName == "4"):
                    cellref.fill = PatternFill("solid", fgColor="FFFF00")
                elif (qualName == "1" and blockName == "5"):
                    cellref.fill = PatternFill("solid", fgColor="FFC000")
                elif (qualName == "1"and blockName == "6"):
                    cellref.fill = PatternFill("solid", fgColor="FF0000")

                #QUAL2
                elif (qualName == "2" and blockName == "1"):
                    cellref.fill = PatternFill("solid", fgColor="00B0F0")
                elif (qualName == "2"and blockName == "2"):
                    cellref.fill = PatternFill("solid", fgColor="92D050")

                #QUAL3
                elif (qualName == "3" and blockName == "1"):
                    cellref.fill = PatternFill("solid", fgColor="FFFF00")
                elif (qualName == "3"and blockName == "2"):
                    cellref.fill = PatternFill("solid", fgColor="9BBB59")
                elif (qualName == "3"and blockName == "3"):
                    cellref.fill = PatternFill("solid", fgColor="FFC000")


                blank_cellref.border = thin_border_sides
                blank_cellref2.border = thin_border_sides
                blank_cellref3.border = thin_border_sides
                blank_cellref4.border = thin_border_sides_Bottom
                blank_cellref.value="------"
                blank_cellref2.value="------"
                blank_cellref3.value="------"
                blank_cellref4.value="------"
                total_index+=1
                # print("Title = " + cellref.coordinate)
                # print("blank = " + blank_cellref.coordinate)
            col_index+=1
            # blank_col_index+=1
            row_index=1   
            cellref = sheet.cell(row=row_index,column=col_index)
            blank_cellref = sheet.cell(row=row_index+1,column=col_index)
            blank_cellref2 = sheet.cell(row=row_index+2,column=col_index)
            blank_cellref3 = sheet.cell(row=row_index+3,column=col_index)
            blank_cellref4 = sheet.cell(row=row_index+4,column=col_index)
            workbook.save(filename=workbook_Title+".xlsx")

        print("Press 1 to enter another qual: ")
        print("Press 2 to go back")
        exit_menu = input()
        if exit_menu == "1":
            addQual()
        else:
            menu()
    addQual() 

        


def menu():
    print("\n1: Make New Schedule")
    print("2: Work on Existing Schedule")
    print("3: System Exit\n")
    userinput = input("Enter a number: ")


    if userinput == "1":
        new_WORKBOOK()
        menu()
    elif userinput == "2":
        existing_WORKBOOK()
    elif userinput == "3":
        SystemExit

menu()

